list(type = 'vector')
l = list()
l[[1]] = c(10, 10)
l
?mvt
library(mvtnorm)
?qmvt
qmvt(0.4)
library(rmvt)
library(mvtnorm)
rmvt(1000, mean = rep(0, 2), sigma = matrix(c(1, 0.7, 0.7, 1), nrow = 2)))
rmvt(1000, mean = rep(0, 2), sigma = matrix(c(1, 0.7, 0.7, 1), nrow = 2))
rmvnorm(1000, mean = rep(0, 2), sigma = matrix(c(1, 0.7, 0.7, 1), nrow = 2))
data.frame(rmvnorm(1000, mean = rep(0, 2), sigma = matrix(c(1, 0.7, 0.7, 1), nrow = 2)))
a <- vector(mode = 'list', length = 2)
a[[2]] <- 2
a[[1]] <- 1
a
a[[3]] <- 4
a
1 - c(1,2,3)
paste('hi', c(1,3,4))
paste('hi', as.character(c(1,3,4)))
paste('hi', as.character(c(1,3,4))
paste('hi', as.character(c(1,3,4))
paste('hi', c(1,3,4), collapse = '')
paste('hi', c(1,3,4), collapse = '', sep = '')
paste('hi', as.list(c(1,3,4)))
paste('hi', toString(c(1,3,4)))
library(haven)
library(dplyr)
library(ggplot2)
library(readr)
library(measurements)
library(geosphere)
#running this should automatically configure the filepath
path <- paste0(getwd(), '/data/raw/')
setwd(path)
getwd()
library(geosphere)
#running this should automatically configure the filepath
path <- paste0(getwd(), '/data/raw/')
path
getwd()
getwd()
getwd()
setwd("~/Desktop/causal-final-project")
getwd()
getSrcDirectory()
setwd(getSrcDirectory()[1])
getSrcDirectory()
?getSrcDirectory
library(haven)
library(rstudioapi)
getSourceEditorContext()$path
dirname(getSourceEditorContext()$path)
#running this should automatically configure the filepath
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
getwd()
# load all relevant datasets
commtowers <- read_dta('commtowers.dta')
setwd(path)
#running this should automatically configure the filepath
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
# load all relevant datasets
commtowers <- read_dta('commtowers.dta')
coverage <- read_dta('coverage.dta')
# Find relevant columns in commtowers
is_uhf <- as.integer(commtowers$channel > 13) # 0 is VHF, 1 is UHF
is_uhf
# We want Visual Power to be in increments of 100 kW.
# I think power_vis column is in kW, so divide by 100.
kw_100 <- commtowers$power_vis / 100
# We want height above ground to be measured in increments of 100 feet
# hgtground column is in feet, so divide by 100
hgt_100 <- commtowers$hgtground / 100
tower_df_unclean <- data.frame(is_uhf, kw_100, hgt_100, station=commtowers$station)
tower_df <- na.omit(tower_df_unclean)
#remove satellite stations from consideration
coverage <- coverage[coverage$satellite == 0,]
# Calculate distance from county centroid to channel's tower
covrate_linearized <- coverage$covrate
covrate_linearized[covrate_linearized=="5-24%"] <- 20
covrate_linearized[covrate_linearized=="25-50%"] <- 40
covrate_linearized[covrate_linearized=="over 50%"] <- 90
covrate_linearized[covrate_linearized=="."] <- NA
dists <- sapply(1:nrow(coverage), function(i) {
# Get <station, county> pair
stn <- coverage$station[i]
county_lat <- coverage$lathh[i]
county_long <- coverage$longhh[i]
if (stn %in% commtowers$station) {
# compute distance from that county's population centroid to the station's tower
tower_info <- commtowers[commtowers$station==stn,]
dist <- distm(c(county_long, county_lat),
c(tower_info$longtower, tower_info$lattower), fun = distHaversine)
# Convert meters to miles
dist_mi <- conv_unit(dist, "m", "mile")
return(dist_mi)
}
return(NA)
})
library(rstudioapi)
library(haven)
library(dplyr)
library(ggplot2)
library(readr)
library(measurements)
library(geosphere)
#running this should automatically configure the filepath
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
# load all relevant datasets
commtowers <- read_dta('commtowers.dta')
coverage <- read_dta('coverage.dta')
# Find relevant columns in commtowers
is_uhf <- as.integer(commtowers$channel > 13) # 0 is VHF, 1 is UHF
is_uhf
# We want Visual Power to be in increments of 100 kW.
# I think power_vis column is in kW, so divide by 100.
kw_100 <- commtowers$power_vis / 100
# We want height above ground to be measured in increments of 100 feet
# hgtground column is in feet, so divide by 100
hgt_100 <- commtowers$hgtground / 100
tower_df_unclean <- data.frame(is_uhf, kw_100, hgt_100, station=commtowers$station)
tower_df <- na.omit(tower_df_unclean)
#remove satellite stations from consideration
coverage <- coverage[coverage$satellite == 0,]
# Calculate distance from county centroid to channel's tower
covrate_linearized <- coverage$covrate
covrate_linearized[covrate_linearized=="5-24%"] <- 20
covrate_linearized[covrate_linearized=="25-50%"] <- 40
covrate_linearized[covrate_linearized=="over 50%"] <- 90
covrate_linearized[covrate_linearized=="."] <- NA
dists <- sapply(1:nrow(coverage), function(i) {
# Get <station, county> pair
stn <- coverage$station[i]
county_lat <- coverage$lathh[i]
county_long <- coverage$longhh[i]
if (stn %in% commtowers$station) {
# compute distance from that county's population centroid to the station's tower
tower_info <- commtowers[commtowers$station==stn,]
dist <- distm(c(county_long, county_lat),
c(tower_info$longtower, tower_info$lattower), fun = distHaversine)
# Convert meters to miles
dist_mi <- conv_unit(dist, "m", "mile")
return(dist_mi)
}
return(NA)
})
dists[dists>=200] <- NA
# Each row is a <county, station> pair, with its distance to the broadcasting tower
cov_df <- na.omit(data.frame(station=coverage$station, dists_10 = dists/10,
covrate_linearized,
state=coverage$state_hh, county=coverage$county_hh,
totalhh = coverage$totalhh))
# Join with info on the tower
cov_df <- inner_join(x=cov_df, y=tower_df, by = 'station')
#sum(is.na(cov_df)) # no na's
coverage.lm <- lm(covrate_linearized ~ dists_10 + is_uhf + kw_100 + hgt_100
+ dists_10*is_uhf, data=cov_df, weights=totalhh)
coef(coverage.lm)
SSstations
SSstations <- read_dta('SSstations.dta')
setwd(path)
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
SSstations <- read_dta('SSstations.dta')
pbs_towers <- read_dta('pbstowers.dta')
SSstations
pbs_towers
counties
SSstations <- read_dta('SSstations.dta')
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
SSstations <- read_dta('SSstations.dta')
pbs_towers <- read_dta('pbstowers.dta')
counties <- read_dta('counties.dta')
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
SSstations <- read_dta('SSstations.dta')
pbs_towers <- read_dta('pbstowers.dta')
counties <- read_dta('counties.dta')
counties
counties
pbs_towers
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
SSstations <- read_dta('SSstations.dta')
pbs_towers <- read_dta('pbstowers.dta')
counties <- read_dta('counties.dta')
cty_dma_xwalk <- read_dta('cty_dma_xwalk.dta')
cty_dma_xwalk
SStations
SSstations
counties
pbs_towers
commtowers
pbs_towers
commtowers
coverage
pbstowers
pbs_towers
pbs_towers$station
inner_join(pbs_towers, SSstations, by = 'station')
SStowers <- inner_join(pbs_towers, SSstations, by = 'station')
na.omit(SStowers)
SStowers
coverage
counties
cty_dma_xwalk
SSstations
pbs_towers
commtowers
commtowers$station == 'KBYU'
commtowers$statio
commtowers$station
convstate <- read_dta('convstate.dta')
convstate <- read_dta('convstate.dta')
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
SSstations <- read_dta('SSstations.dta')
pbs_towers <- read_dta('pbstowers.dta')
counties <- read_dta('counties.dta')
cty_dma_xwalk <- read_dta('cty_dma_xwalk.dta')
convstate <- read_dta('convstate.dta')
convstate
counties
pbs_towers
SSstations
counties
pbs_towers
SSstations
path <- paste0(dirname(getSourceEditorContext()$path), '/data/raw/')
setwd(path)
SSstations <- read_dta('SSstations.dta')
pbs_towers <- read_dta('pbstowers.dta')
counties <- read_dta('counties.dta')
cty_dma_xwalk <- read_dta('cty_dma_xwalk.dta')
convstate <- read_dta('convstate.dta')
SScovcty_final <- read_dta('SScovcty_final.dta')
SScovcty_final
SStowers
counties
?full_join
full_join(SStowers, counties, by = character())
nrow(SStowers)*nrow(counties)
?distHaverine
?distHaversine
?distm
station_locs <- matrix(crossprod$lattower, crossprod$longtower)
crossprod <- full_join(SStowers, counties, by = character())
station_locs <- matrix(crossprod$lattower, crossprod$longtower)
station_locs <- matrix(c(crossprod$lattower, crossprod$longtower), ncol = 2)
station_locs
county_locs <- matrix(c(crossprod$lathh, crossprod$longhh), ncol = 2)
dists <- diag(distm(x=station_locs, y=county_locs, fun=distHaversine))
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
dists <- diag(distm(x=station_locs, y=county_locs, fun=distHaversine))
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
dists <- diag(distm(x=station_locs, y=county_locs, fun=distHaversine))
?distHaversine
dists <- distHaversine(x=station_locs, y=county_locs)
dists <- distHaversine(p1=station_locs, p2=county_locs)
dists
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
dist_mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
crossprod
crossprod %>% filter(dist_mi <= 200)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
SSstation_cty_pairs
SSstation_cty_pairs$state.x
SSstation_cty_pairs
SSstation_cty_pairs$channel.x
SSstation_cty_pairs$channel.x >= 13
sum(SSstation_cty_pairs$channel.x >= 13
)
sum(SSstation_cty_pairs$channel.x >= 13)
SSstation_cty_pairs
any(SSstation_cty_pairs$channel.x != SSstation_cty_pairs$channel.y)
SSstation_cty_pairs$channel.x != SSstation_cty_pairs$channel.y
sum(SSstation_cty_pairs$channel.x != SSstation_cty_pairs$channel.y)
SStation_cty_pairs[SSstation_cty_pairs$channel.x != SSstation_cty_pairs$channel.y,]
SSstation_cty_pairs[SSstation_cty_pairs$channel.x != SSstation_cty_pairs$channel.y,]
SSstation_cty_pairs[SSstation_cty_pairs$channel.x != SSstation_cty_pairs$channel.y,]
SSstation_cty_pairs$ctyname
SSstation_cty_pairs$stfips_hh
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SStation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_UHF, ctyname, stname, ctyfips_hh, stfips_hh)
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_UHF, ctyname, stname, ctyfips_hh, stfips_hh)
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_UHF = SSstation_cty_pairs$channel.x > 13)
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_UHF, ctyname, stname, ctyfips_hh, stfips_hh)
crossprod <- crossprod %>% mutate(dists = )
SSstation_cty_pairs
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_UHF = as.integer(SSstation_cty_pairs$channel.x > 13))
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_UHF, ctyname, stname, ctyfips_hh, stfips_hh)
SSstation_cty_pairs
na.omit(SSstation_cty_pairs)
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SStation_cty_pairs <- na.omit(SSstation_cty_pairs)
# note: there are no county-station pairings left with missing values in these columns
# match PBS towers with the stations that air Sesame Street
SStowers <- inner_join(pbs_towers, SSstations, by = 'station')
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_UHF = as.integer(SSstation_cty_pairs$channel.x > 13))
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_UHF, ctyname, stname, ctyfips_hh, stfips_hh)
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SStation_cty_pairs <- na.omit(SSstation_cty_pairs)
# note: there are no county-station pairings left with missing values in these columns
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SSstation_cty_pairs <- na.omit(SSstation_cty_pairs)
SSstation_cty_pairs
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100)
SSstation_cty_pairs
?predict.lm
# get coverage predictions
predict.lm(coverage.lm, SSstation_cty_pairs)
coverage.lm
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100, dists_10:is_uhf = dists_10*is_uhf)
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100, dists_10is_uhf = dists_10*is_uhf)
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10:is_uhf = dists_10*is_uhf)
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100)
# get coverage predictions
predict.lm(coverage.lm, SSstation_cty_pairs)
# get coverage predictions
predict(coverage.lm, SSstation_cty_pairs)
coverage.lm
# match PBS towers with the stations that air Sesame Street
SStowers <- inner_join(pbs_towers, SSstations, by = 'station')
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_uhf = as.integer(SSstation_cty_pairs$channel.x > 13))
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_uhf, ctyname, stname, ctyfips_hh, stfips_hh)
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SSstation_cty_pairs <- na.omit(SSstation_cty_pairs)
# note: there are no county-station pairings left with missing values in these columns
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100)
# get coverage predictions
predict(coverage.lm, SSstation_cty_pairs)
# get coverage predictions
predict.lm(coverage.lm, SSstation_cty_pairs)
# get coverage predictions
SScov_preds <- predict.lm(coverage.lm, SSstation_cty_pairs)
SScov_preds
SSstation_cty_pairs
# match PBS towers with the stations that air Sesame Street
SStowers <- inner_join(pbs_towers, SSstations, by = 'station')
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_uhf = as.integer(SSstation_cty_pairs$channel.x > 13))
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_uhf, ctyname, stname, ctyfips_hh, stfips_hh, pop70)
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SSstation_cty_pairs <- na.omit(SSstation_cty_pairs)
# note: there are no county-station pairings left with missing values in these columns
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100)
# get coverage predictions
SScov_preds <- predict.lm(coverage.lm, SSstation_cty_pairs)
SSstation_cty_covs <- SStation_cty_pairs %>% mutate(pred_coverage = SScov_preds)
SSstation_cty_covs
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% max()
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage))
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage), .groups = 'keep
')
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage), .groups = 'keep')
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage), .groups = 'drop')
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage), .groups = 'rowwise')
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage), .groups = 'kep')
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% summarize(max(pred_coverage), .groups = 'keep')
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% ungroup()
SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% filter(pred_coverage == max_pred_cov) %>% ungroup()
# take maximum coverage for each county
SSstation_cty_final <- SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% filter(pred_coverage == max_pred_cov) %>% ungroup()
SSstation_cty_final
# take maximum coverage for each county
SSstation_cty_final <- SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% filter(pred_coverage == max_pred_cov) %>% ungroup() %>% drop(pred_coverage)
?drop
# take maximum coverage for each county
SSstation_cty_final <- SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% filter(pred_coverage == max_pred_cov) %>% ungroup() %>% select(-pred_coverage)
SSstation_cty_final
# match PBS towers with the stations that air Sesame Street
SStowers <- inner_join(pbs_towers, SSstations, by = 'station')
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_uhf = as.integer(SSstation_cty_pairs$channel.x > 13))
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_uhf, ctyname, stname, ctyfips_hh, stfips_hh, pop70)
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SSstation_cty_pairs <- na.omit(SSstation_cty_pairs)
# note: there are no county-station pairings left with missing values in these columns
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100)
# get coverage predictions
SScov_preds <- predict.lm(coverage.lm, SSstation_cty_pairs)
SSstation_cty_covs <- SStation_cty_pairs %>% mutate(pred_coverage = SScov_preds)
# take maximum coverage for each county
SSstation_cty_final <- SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% filter(pred_coverage == max_pred_cov) %>% ungroup() %>% select(-pred_coverage)
# displaying the final data frame
SSstation_cty_final
# match PBS towers with the stations that air Sesame Street
SStowers <- inner_join(pbs_towers, SSstations, by = 'station')
# get all possible station and county pairs
crossprod <- full_join(SStowers, counties, by = character())
# grab the station and county coordinates
station_locs <- matrix(c(crossprod$longtower, crossprod$lattower), ncol = 2)
county_locs <- matrix(c(crossprod$longhh, crossprod$lathh), ncol = 2)
# compute distances
dist <- distHaversine(p1=station_locs, p2=county_locs)
dist_mi <- conv_unit(dist, "m", "mile")
# add back to the crossproduct, and filter for <= 200 mi
crossprod <- crossprod %>% mutate(dist_mi = dist_mi)
SSstation_cty_pairs <- crossprod %>% filter(dist_mi <= 200)
# add the UHF indicator
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(is_uhf = as.integer(SSstation_cty_pairs$channel.x > 13))
# grab columns that are of interest to the predictions
SSstation_cty_pairs <- SSstation_cty_pairs %>% select(power_vis, hgtground, dist_mi, is_uhf, ctyname, stname, ctyfips_hh, stfips_hh, pop70)
# drop any observations for which there is a missing value of any of these crucial measures for coverage prediction
SSstation_cty_pairs <- na.omit(SSstation_cty_pairs)
# note: there are no county-station pairings left with missing values in these columns
# do unit conversions before feeding into fitted regression
SSstation_cty_pairs <- SSstation_cty_pairs %>% mutate(dists_10 = dist_mi/10, kw_100 = power_vis/100, hgt_100 = hgtground/100)
# get coverage predictions
SScov_preds <- predict.lm(coverage.lm, SSstation_cty_pairs)
SSstation_cty_covs <- SSstation_cty_pairs %>% mutate(pred_coverage = SScov_preds)
# take maximum coverage for each county
SSstation_cty_final <- SSstation_cty_covs %>% group_by(ctyfips_hh, stfips_hh) %>% mutate(max_pred_cov = max(pred_coverage)) %>% filter(pred_coverage == max_pred_cov) %>% ungroup() %>% select(-pred_coverage)
# displaying the final data frame
SSstation_cty_final
sum(SSstation_cty_final$pop70*(SSstation_cty_final$max_pred_cov/100))
sum(SSstation_cty_final$pop70*(SSstation_cty_final$max_pred_cov/100))/sum(SSstation_cty_final$pop70)
